@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorBlog.Data
@using BlazorBlog.Services.Common

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>
<div class="container d-flex justify-content-center align-items-center" style="min-height: calc(100vh - 250px)">
    <div class="col-sm-4 shadow py-3 rounded">
    <h1 class="text-center">Log in</h1>
    <StatusMessage Message="@errorMessage"/>
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator/>
        <h5 class="text-center">Use a local account to log in.</h5>
        <hr/>
        <ValidationSummary class="text-danger" role="alert"/>
        <div class="form-floating mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
            <ValidationMessage For="() => Input.Email" class="text-danger"/>
        </div>
        <div class="form-floating mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
            <ValidationMessage For="() => Input.Password" class="text-danger"/>
        </div>
        <div class="checkbox mb-3 ml-4">
            <label class="form-label">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                Remember me
            </label>
        </div>
        <div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
        </div>
    </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; } = "/admin/dashboard";

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        await PerformLoginAsync();
        // // This doesn't count login failures towards account lockout
        // // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     Logger.LogInformation("User logged in.");
        //     RedirectManager.RedirectTo(ReturnUrl);
        // }
        // else if (result.RequiresTwoFactor)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/LoginWith2fa",
        //         new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        // }
        // else if (result.IsLockedOut)
        // {
        //     Logger.LogWarning("User account locked out.");
        //     RedirectManager.RedirectTo("Account/Lockout");
        // }
        // else
        // {
        //     errorMessage = "Error: Invalid login attempt.";
        // }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    private async Task PerformLoginAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);

        if (user is null)
        {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, false);

        if (!result.Succeeded)
        {
            errorMessage = "Error: Incorrect Password!";
            return;
        }

        Claim[] additionalClaims = [new Claim(AppConstants.ClaimNames.FullName, user.Name)];

        await SignInManager.SignInWithClaimsAsync(user, Input.RememberMe, additionalClaims);

        Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
    }
}
