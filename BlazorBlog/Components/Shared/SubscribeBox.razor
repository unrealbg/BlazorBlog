@using Subscriber = BlazorBlog.Domain.Entities.Subscriber
@inject ISubscribeService SubscriberService
@inject IValidator<Subscriber> Validator

@attribute [StreamRendering ]

@if (Simple)
{
    <div class="rounded-2xl bg-slate-800 p-6">
        <h3 class="text-lg font-semibold text-white mb-2">Subscribe</h3>
        <p class="text-sm text-slate-300 mb-4">Get new articles delivered right to your inbox.</p>
        <EditForm EditContext="_editContext" method="post" OnSubmit="SubscribeAsync" FormName="subscribe-form" Enhance>
            <DataAnnotationsValidator />
            <div class="flex gap-2">
                <InputText type="email" 
                          class="flex-1 rounded-xl border border-slate-600 bg-slate-700 px-4 py-2 text-sm text-white placeholder-slate-400 outline-none focus:border-brand-500 focus:ring-1 focus:ring-brand-500" 
                          placeholder="you@example.com" 
                          @bind-Value="@Subscriber.Email" />
                <button type="submit" class="rounded-xl bg-brand-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-brand-700">OK</button>
            </div>
            <ValidationMessage For="() => Subscriber.Email" class="text-xs text-red-400 mt-1" />
            @if (!string.IsNullOrEmpty(_message))
            {
                <p class="mt-2 text-sm text-slate-300">@_message</p>
            }
        </EditForm>
    </div>
}
else
{
    <div class="overflow-hidden rounded-2xl border border-slate-200 bg-white p-5 dark:border-slate-800 dark:bg-slate-900">
        <div class="grid gap-6 md:grid-cols-2">
            <div>
                <h3 class="text-base font-semibold">Become a member</h3>
                <p class="mt-1 text-sm text-slate-600 dark:text-slate-300">Get the latest news right in your inbox. It's free and you can unsubscribe at any time. We hate spam as much as we do, so we never spam!</p>
            </div>
            <div>
                <EditForm EditContext="_editContext" method="post" OnSubmit="SubscribeAsync" FormName="subscribe-form" Enhance>
                    <DataAnnotationsValidator />
                    <div class="grid gap-3 sm:grid-cols-2">
                        <div>
                            <InputText class="w-full rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm outline-none focus:border-brand-500 dark:border-slate-800 dark:bg-slate-900" placeholder="Name" @bind-Value="@Subscriber.Name" />
                            <ValidationMessage For="() => Subscriber.Name" class="text-xs text-red-600" />
                        </div>
                        <div>
                            <InputText type="email" class="w-full rounded-xl border border-slate-200 bg-white px-3 py-2 text-sm outline-none focus:border-brand-500 dark:border-slate-800 dark:bg-slate-900" placeholder="Email" @bind-Value="@Subscriber.Email" />
                            <ValidationMessage For="() => Subscriber.Email" class="text-xs text-red-600" />
                        </div>
                        @if (!string.IsNullOrEmpty(_message))
                        {
                            <div class="sm:col-span-2">
                                <p class="m-0 p-0 text-sm">@_message</p>
                            </div>
                        }
                        <div class="sm:col-span-2">
                            <button type="submit" class="w-full rounded-xl bg-brand-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-brand-700">Subscribe</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [SupplyParameterFromForm]
    private Subscriber Subscriber { get; set; } = new Subscriber();

    [Parameter]
    public bool Simple { get; set; }

    private string? _message;

    private EditContext _editContext = default!;
    private ValidationMessageStore? _messageStore;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Subscriber);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private async Task SubscribeAsync()
    {
        _message = null;
        _messageStore!.Clear();

        if (Simple && string.IsNullOrWhiteSpace(Subscriber.Name))
        {
            Subscriber.Name = "Friend";
        }

        var validationResult = await Validator.ValidateAsync(Subscriber);
        if (!validationResult.IsValid)
        {
            foreach (var error in validationResult.Errors)
            {
                var fi = new FieldIdentifier(Subscriber, error.PropertyName);
                _messageStore.Add(fi, error.ErrorMessage);
            }
            _editContext.NotifyValidationStateChanged();
            return;
        }

        _message = "Subscribing...";

        var errorMessage = await SubscriberService.AddSubscriberAsync(Subscriber);

        if (errorMessage is not null)
        {
            _message = errorMessage;
        }
        else
        {
            _message = "You have successfully subscribed.";
            Subscriber = new Subscriber();
            _editContext = new EditContext(Subscriber);
            _messageStore = new ValidationMessageStore(_editContext);
        }
    }
}

