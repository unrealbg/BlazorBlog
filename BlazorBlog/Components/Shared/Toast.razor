@inject BlazorBlog.Application.UI.IToastService ToastService

@rendermode InteractiveServer

<style>
    /* Minimal animations for entry + progress */
    @@keyframes toast-slide-in { from { transform: translate3d(16px,-8px,0); opacity:0 } to { transform: translate3d(0,0,0); opacity:1 } }
    @@keyframes toast-progress { from { transform: scaleX(1) } to { transform: scaleX(0) } }
</style>

@if (_toasts.Count > 0)
{
    var containerPosClass = Position == BlazorBlog.Components.Shared.ToastAnchor.BottomRight
        ? "fixed bottom-4 right-4"
        : "fixed top-4 right-4";

    <div class="pointer-events-none @containerPosClass z-[9999]" role="region" aria-live="polite" aria-atomic="true">
        <div class="flex max-w-[92vw] flex-col items-end gap-2">
        @foreach (var toast in _toasts)
        {
            <div class="pointer-events-auto w-[360px] max-w-[92vw] rounded-md border border-slate-200/70 bg-white/95 p-0 text-slate-800 shadow-lg backdrop-blur transition dark:border-slate-800 dark:bg-slate-900/95 dark:text-slate-100" role="status" style="animation: toast-slide-in .22s ease-out">
                <div class="flex items-start gap-3 p-3">
                    <div class="mt-0.5 inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-full text-white shadow @GetAccentBgClass(toast.ToastLevel)" aria-hidden="true">
                        @GetIcon(toast.ToastLevel)
                    </div>
                    <div class="min-w-0 flex-1">
                        <div class="flex items-start justify-between gap-3">
                            <p class="m-0 truncate text-sm font-semibold">@toast.Heading</p>
                            <button class="-m-1 inline-flex h-7 w-7 items-center justify-center rounded-md text-slate-400 transition hover:text-slate-600 focus:outline-none focus:ring-2 focus:ring-brand-500 dark:text-slate-400 dark:hover:text-slate-200" title="Dismiss" aria-label="Dismiss notification" @onclick="() => RemoveToast(toast)">✕</button>
                        </div>
                        <div class="mt-1 text-sm text-slate-600 dark:text-slate-300">@((MarkupString)(toast.Message ?? string.Empty))</div>
                    </div>
                </div>
                <div class="h-0.5 w-full overflow-hidden bg-slate-200 dark:bg-slate-800">
                    <i class="block h-full w-full origin-left @GetAccentBgClass(toast.ToastLevel)" style=@($"animation: toast-progress {toast.DurationMs}ms linear forwards")></i>
                </div>
            </div>
        }
        </div>
    </div>
}

@code {
    private List<ToastModel> _toasts = new();

    [Parameter]
    public BlazorBlog.Components.Shared.ToastAnchor Position { get; set; } = BlazorBlog.Components.Shared.ToastAnchor.TopRight;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async void ShowToast(BlazorBlog.Application.UI.ToastLevel level, string message, string heading, int? durationMs)
    {
        if (string.IsNullOrWhiteSpace(message) && string.IsNullOrWhiteSpace(heading))
        {
            if (_toasts.Count > 0)
            {
                foreach (var t in _toasts)
                {
                    t.CancellationTokenSource.Cancel();
                }
                _toasts.Clear();
                StateHasChanged();
            }
            return;
        }

        // Allow message-only or heading-only toasts; fallback heading to level
        if (string.IsNullOrWhiteSpace(message) && !string.IsNullOrWhiteSpace(heading))
        {
            message = heading;
        }
        if (string.IsNullOrWhiteSpace(heading))
        {
            heading = level.ToString();
        }

        var existingToast = _toasts.FirstOrDefault(t => t.Heading == heading && t.Message == message);
        if (existingToast is not null)
        {
            existingToast.CancellationTokenSource.Cancel();
            existingToast.CancellationTokenSource = new CancellationTokenSource();
            existingToast.DurationMs = durationMs ?? existingToast.DurationMs;
            await DelayToastDismissal(existingToast);
        }
        else
        {
            var newToast = new ToastModel { Heading = heading, Message = message, ToastLevel = level.ToString(), DurationMs = durationMs ?? GetDefaultDurationMs(level) };
            // Newest on top
            _toasts.Insert(0, newToast);
            StateHasChanged();
            await DelayToastDismissal(newToast);
        }
    }

    private async Task DelayToastDismissal(ToastModel toast)
    {
        try
        {
            await Task.Delay(toast.DurationMs, toast.CancellationTokenSource.Token);
        }
        catch (TaskCanceledException)
        {
            return;
        }

        if (_toasts.Contains(toast))
        {
            _toasts.Remove(toast);
            StateHasChanged();
        }
    }

    private void RemoveToast(ToastModel toast)
    {
        if (_toasts.Contains(toast))
        {
            toast.CancellationTokenSource.Cancel();
            _toasts.Remove(toast);
            StateHasChanged();
        }
    }

    private RenderFragment GetIcon(string level) => builder =>
    {
        var svg = level switch
        {
            nameof(BlazorBlog.Application.UI.ToastLevel.Success) => "<svg viewBox='0 0 24 24' width='14' height='14' fill='currentColor' aria-hidden='true'><path d='M9 16.2 4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4z'/></svg>",
            nameof(BlazorBlog.Application.UI.ToastLevel.Warning) => "<svg viewBox='0 0 24 24' width='14' height='14' fill='currentColor' aria-hidden='true'><path d='M1 21h22L12 2 1 21zm12-3h-2v2h2v-2zm0-8h-2v6h2V10z'/></svg>",
            nameof(BlazorBlog.Application.UI.ToastLevel.Error)   => "<svg viewBox='0 0 24 24' width='14' height='14' fill='currentColor' aria-hidden='true'><path d='M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 13.6L15.6 17 12 13.4 8.4 17 7 15.6 10.6 12 7 8.4 8.4 7 12 10.6 15.6 7 17 8.4 13.4 12 17 15.6z'/></svg>",
            _ => "<svg viewBox='0 0 24 24' width='14' height='14' fill='currentColor' aria-hidden='true'><path d='M11 7h2v6h-2zm0 8h2v2h-2z'/><path d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z'/></svg>"
        };
        builder.AddMarkupContent(0, svg);
    };

    private string GetAccentBgClass(string level) => level switch
    {
        nameof(BlazorBlog.Application.UI.ToastLevel.Success) => "bg-emerald-600",
        nameof(BlazorBlog.Application.UI.ToastLevel.Warning) => "bg-amber-500",
        nameof(BlazorBlog.Application.UI.ToastLevel.Error)   => "bg-rose-600",
        _ => "bg-brand-600"
    };

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
       
        foreach (var toast in _toasts)
        {
            toast.CancellationTokenSource.Cancel();
        }
    }

    const int DefaultDurationMs = 10000;

    private static int GetDefaultDurationMs(BlazorBlog.Application.UI.ToastLevel level) => level switch
    {
        BlazorBlog.Application.UI.ToastLevel.Success => 5000,
        BlazorBlog.Application.UI.ToastLevel.Warning => 10000,
        BlazorBlog.Application.UI.ToastLevel.Error   => 15000,
        _ => DefaultDurationMs
    };

    class ToastModel
    {
        public string Heading { get; set; } = string.Empty;

        public string Message { get; set; } = string.Empty;

        public string ToastLevel { get; set; } = string.Empty;

        public int DurationMs { get; set; } = DefaultDurationMs;

        public CancellationTokenSource CancellationTokenSource { get; set; } = new CancellationTokenSource();
    }
}