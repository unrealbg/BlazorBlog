@using BlazorBlog.Services.Utilities
@inject IToastService ToastService

@rendermode InteractiveServer

<style>
    
</style>

@if (_toasts.Count > 0)
{
    <div class="toast-container">
        @foreach (var toast in _toasts)
        {
            <div class="toast @toast.ToastLevel">
                <div class="toast-header">
                    <strong class="mr-auto">@toast.Heading</strong>
                    <small>Just now</small>
                    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close" @onclick="() => RemoveToast(toast)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="toast-body">
                    @((MarkupString)toast.Message)
                </div>
            </div>
        }
    </div>
}

@code {
    private List<ToastModel> _toasts = new List<ToastModel>();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private async void ShowToast(ToastLevel level, string message, string heading)
    {
        if (string.IsNullOrEmpty(message) || string.IsNullOrEmpty(heading))
        {
            return;
        }

        var existingToast = _toasts.FirstOrDefault(t => t.Heading == heading && t.Message == message);
    
        if (existingToast != null)
        {
            existingToast.CancellationTokenSource.Cancel();
            existingToast.CancellationTokenSource = new CancellationTokenSource();
            await DelayToastDismissal(existingToast);
        }
        else
        {
            var newToast = new ToastModel { Heading = heading, Message = message, ToastLevel = level.ToString() };
            _toasts.Add(newToast);
            StateHasChanged();
            await DelayToastDismissal(newToast);
        }
    }

    private async Task DelayToastDismissal(ToastModel toast)
    {
        try
        {
            await Task.Delay(10000, toast.CancellationTokenSource.Token);
        }
        catch (TaskCanceledException)
        {
            return;
        }

        if (_toasts.Contains(toast))
        {
            _toasts.Remove(toast);
            StateHasChanged();
        }
    }

    private void RemoveToast(ToastModel toast)
    {
        if (_toasts.Contains(toast))
        {
            toast.CancellationTokenSource.Cancel();
            _toasts.Remove(toast);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
       
        foreach (var toast in _toasts)
        {
            toast.CancellationTokenSource.Cancel();
        }
    }

    class ToastModel
    {
        public string Heading { get; set; }

        public string Message { get; set; }

        public string ToastLevel { get; set; }

        public CancellationTokenSource CancellationTokenSource { get; set; } = new CancellationTokenSource();
    }
}