@page "/admin/manage-blog-posts"

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBlogPostAdminService BlogPostService

<PageTitle>@Utils.GetPageTitle("Manage Blog Posts")</PageTitle>

<AdminHeader Title="Manage Blog Posts">
    <ActionButtons>
        <a href="admin/manage-blog-posts/new" class="btn btn-primary btn-sm" data-enhance-nav="false">+ Add new Blog Post</a>
    </ActionButtons>
</AdminHeader>

@if (_isLoading)
{
    <Loader LoaderText="@_loadingText" />
}

<QuickGrid ItemsProvider="_blogPostProvider" Pagination="_paginationState" class="table table-bordered table-striped table-hover">
    <PropertyColumn Property="@(b => b.Id)" />
    <TemplateColumn>
        <div class="py-2" style="display: grid; grid-template-columns: 60px auto; grid-column-gap: 10px;">
            <img src="@context.Image" style="height: 60px; width: 60px; object-fit: cover" />
            <div>
                <label class="mb-0 d-block">@context.Title</label>
                @if (context.IsPublished)
                {
                    <a href="posts/@context.Slug" target="_blank">@context.Slug</a>
                }
                else
                {
                    <label>@context.Slug</label>
                }
            </div>
        </div>
    </TemplateColumn>
    <PropertyColumn Property="@(b => b.Category.Name)" Title="Category" />
    <TemplateColumn Title="Featured">
        @if (context.IsFeatured)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandleFeaturedChanged(context))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandleFeaturedChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    <TemplateColumn Title="Published">
        @if (context.IsPublished)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    <TemplateColumn>
        <a href="admin/manage-blog-posts/edit/@context.Id" data-enhance-nav="false" class="btn btn-primary btn-sm">Edit</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="_paginationState" />

@code {
    private bool _isLoading;
    private string? _loadingText;

    private const int PageSize = 10;

    private PaginationState _paginationState = new PaginationState
        {
            ItemsPerPage = PageSize
        };

    private GridItemsProvider<BlogPost> _blogPostProvider { get; set; }

    protected override void OnInitialized()
    {
        _blogPostProvider = async request =>
        {
            _isLoading = true;
            _loadingText = "Fetching blog posts";

            StateHasChanged();

            var pagedBlogs = await BlogPostService.GetBlogPostsAsync(request.StartIndex, request.Count ?? PageSize);

            _isLoading = false;
            StateHasChanged();

            return GridItemsProviderResult.From(pagedBlogs.Records, pagedBlogs.TotalCount);
        };
    }

    private async Task HandleFeaturedChanged(BlogPost blogPost)
    {
        blogPost.IsFeatured = !blogPost.IsFeatured;
        await SaveChangesAsync(blogPost);
    }

    private async Task HandlePublishedChanged(BlogPost blogPost)
    {
        blogPost.IsPublished = !blogPost.IsPublished;
        await SaveChangesAsync(blogPost);
    }

    private async Task SaveChangesAsync(BlogPost blogPost)
    {
        _loadingText = "Saving changes";
        _isLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.GetUserId();

        await BlogPostService.SaveBlogPostAsync(blogPost, userId);
        _isLoading = false;
    }
}
