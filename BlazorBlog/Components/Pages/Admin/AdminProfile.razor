@page "/admin/profile"
@using BlazorBlog.Application.Contracts
@using ToastLevel = BlazorBlog.Application.UI.ToastLevel
@using BlazorBlog.Application.ViewModels
@using BlazorBlog.Infrastructure.Persistence
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>@Utils.GetPageTitle("Admin Profile")</PageTitle>

@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@inject IAdminProfileService AdminProfileService
@inject IToastService ToastService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AdminHeader Title="Admin Profile" />

@if (_isLoading)
{
<Loader LoaderText="Loading profile..." />
}
else
{
    <div class="space-y-6">
   <div class="rounded-xl border border-slate-200/60 bg-white p-6 shadow-soft dark:border-slate-800 dark:bg-slate-900">
    <h3 class="mb-4 text-lg font-semibold text-slate-900 dark:text-slate-100">Profile Information</h3>
            
            <EditForm EditContext="_editContext" OnValidSubmit="HandleUpdateProfileAsync">
       <DataAnnotationsValidator />
         
       <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
     <div>
     <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
       Name <span class="text-red-600">*</span>
              </label>
        <InputText @bind-Value="_profileModel.Name" 
             class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
          placeholder="Your name" />
         <ValidationMessage For="() => _profileModel.Name" class="mt-1 text-sm text-red-600" />
          </div>

     <div>
          <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
   Email <span class="text-red-600">*</span>
      </label>
     <InputText @bind-Value="_profileModel.Email" 
         type="email"
         class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
   placeholder="your.email@example.com" />
        <ValidationMessage For="() => _profileModel.Email" class="mt-1 text-sm text-red-600" />
         </div>

<div class="md:col-span-2">
   <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
              Phone Number
             </label>
  <InputText @bind-Value="_profileModel.PhoneNumber" 
       type="tel"
     class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
  placeholder="+359 XXX XXX XXX" />
     <ValidationMessage For="() => _profileModel.PhoneNumber" class="mt-1 text-sm text-red-600" />
 </div>
     </div>

     <div class="mt-6 flex gap-3">
         <button type="submit" 
        disabled="@_isSaving" 
             class="inline-flex items-center rounded-md bg-emerald-600 px-4 py-2 text-sm font-semibold text-white hover:bg-emerald-700 disabled:cursor-not-allowed disabled:opacity-60">
    @if (_isSaving)
            {
 <svg class="-ml-0.5 mr-2 h-4 w-4 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">
<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
            </svg>
        <span>Saving...</span>
         }
 else
       {
      <span>Save Changes</span>
         }
      </button>
    </div>
</EditForm>
        </div>

     <div class="rounded-xl border border-slate-200/60 bg-white p-6 shadow-soft dark:border-slate-800 dark:bg-slate-900">
            <h3 class="mb-4 text-lg font-semibold text-slate-900 dark:text-slate-100">Change Password</h3>
            
            <EditForm EditContext="_passwordEditContext" OnValidSubmit="HandleChangePasswordAsync">
        <DataAnnotationsValidator />
    
   <div class="grid grid-cols-1 gap-4">
     <div>
          <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
         Current Password <span class="text-red-600">*</span>
          </label>
      <div class="relative">
  <InputText @bind-Value="_passwordModel.CurrentPassword" 
           type="@(_showCurrentPassword ? "text" : "password")"
          class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 pr-12 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
     placeholder="••••••••" />
        <button type="button" 
            @onclick="() => _showCurrentPassword = !_showCurrentPassword"
          class="absolute right-1.5 top-1/2 -translate-y-1/2 inline-flex h-9 w-9 items-center justify-center rounded-md text-slate-500 hover:text-brand-600 focus:outline-none focus:ring-2 focus:ring-brand-500">
  @if (_showCurrentPassword)
       {
   <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M2 5l17 17-1.5 1.5L16 20.5A13.9 13.9 0 0112 21C7 21 2.7 17.9 1 14c.7-1.5 1.8-2.9 3.1-4.1L.5 6.5 2 5zM7 9l2.2 2.2a5 5 0 016.6 6.6L18 19a12 12 0 003-5c-1.7-3.9-6-7-11-7-1.1 0-2.1.1-3 .3z"/></svg>
        }
         else
             {
   <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M12 5C7 5 2.7 8.1 1 12c1.7 3.9 6 7 11 7s9.3-3.1 11-7c-1.7-3.9-6-7-11-7zm0 12a5 5 0 115-5 5 5 0 01-5 5z"/></svg>
 }
         </button>
      </div>
     <ValidationMessage For="() => _passwordModel.CurrentPassword" class="mt-1 text-sm text-red-600" />
  </div>

       <div>
               <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
          New Password <span class="text-red-600">*</span>
     </label>
      <div class="relative">
 <InputText @bind-Value="_passwordModel.NewPassword" 
   type="@(_showNewPassword ? "text" : "password")"
    class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 pr-12 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
         placeholder="••••••••" />
        <button type="button" 
    @onclick="() => _showNewPassword = !_showNewPassword"
             class="absolute right-1.5 top-1/2 -translate-y-1/2 inline-flex h-9 w-9 items-center justify-center rounded-md text-slate-500 hover:text-brand-600 focus:outline-none focus:ring-2 focus:ring-brand-500">
       @if (_showNewPassword)
            {
              <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M2 5l17 17-1.5 1.5L16 20.5A13.9 13.9 0 0112 21C7 21 2.7 17.9 1 14c.7-1.5 1.8-2.9 3.1-4.1L.5 6.5 2 5zM7 9l2.2 2.2a5 5 0 016.6 6.6L18 19a12 12 0 003-5c-1.7-3.9-6-7-11-7-1.1 0-2.1.1-3 .3z"/></svg>
                  }
    else
       {
     <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M12 5C7 5 2.7 8.1 1 12c1.7 3.9 6 7 11 7s9.3-3.1 11-7c-1.7-3.9-6-7-11-7zm0 12a5 5 0 115-5 5 5 0 01-5 5z"/></svg>
             }
       </button>
      </div>
    <ValidationMessage For="() => _passwordModel.NewPassword" class="mt-1 text-sm text-red-600" />
      <p class="mt-1 text-xs text-slate-500 dark:text-slate-400">Must be at least 6 characters long</p>
          </div>

         <div>
  <label class="mb-1 block text-sm font-medium text-slate-700 dark:text-slate-200">
            Confirm New Password <span class="text-red-600">*</span>
    </label>
        <div class="relative">
       <InputText @bind-Value="_passwordModel.ConfirmPassword" 
            type="@(_showConfirmPassword ? "text" : "password")"
     class="w-full rounded-md border border-slate-300 bg-white px-3 py-2 pr-12 text-sm text-slate-900 shadow-sm focus:border-brand-500 focus:outline-none focus:ring-1 focus:ring-brand-500 dark:border-slate-700 dark:bg-slate-800 dark:text-slate-100" 
             placeholder="••••••••" />
         <button type="button" 
    @onclick="() => _showConfirmPassword = !_showConfirmPassword"
       class="absolute right-1.5 top-1/2 -translate-y-1/2 inline-flex h-9 w-9 items-center justify-center rounded-md text-slate-500 hover:text-brand-600 focus:outline-none focus:ring-2 focus:ring-brand-500">
       @if (_showConfirmPassword)
  {
      <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M2 5l17 17-1.5 1.5L16 20.5A13.9 13.9 0 0112 21C7 21 2.7 17.9 1 14c.7-1.5 1.8-2.9 3.1-4.1L.5 6.5 2 5zM7 9l2.2 2.2a5 5 0 016.6 6.6L18 19a12 12 0 003-5c-1.7-3.9-6-7-11-7-1.1 0-2.1.1-3 .3z"/></svg>
   }
   else
           {
          <svg viewBox="0 0 24 24" width="18" height="18" fill="currentColor"><path d="M12 5C7 5 2.7 8.1 1 12c1.7 3.9 6 7 11 7s9.3-3.1 11-7c-1.7-3.9-6-7-11-7zm0 12a5 5 0 115-5 5 5 0 01-5 5z"/></svg>
    }
     </button>
      </div>
       <ValidationMessage For="() => _passwordModel.ConfirmPassword" class="mt-1 text-sm text-red-600" />
         </div>
         </div>

       <div class="mt-6 flex gap-3">
              <button type="submit" 
            disabled="@_isChangingPassword" 
                 class="inline-flex items-center rounded-md bg-brand-600 px-4 py-2 text-sm font-semibold text-white hover:bg-brand-700 disabled:cursor-not-allowed disabled:opacity-60">
 @if (_isChangingPassword)
        {
            <svg class="-ml-0.5 mr-2 h-4 w-4 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
     </svg>
         <span>Changing...</span>
    }
   else
                {
      <span>Change Password</span>
}
        </button>
                </div>
            </EditForm>
 </div>

    <div class="rounded-xl border border-slate-200/60 bg-white p-6 shadow-soft dark:border-slate-800 dark:bg-slate-900">
      <h3 class="mb-4 text-lg font-semibold text-slate-900 dark:text-slate-100">Account Information</h3>
    <dl class="grid grid-cols-1 gap-4 text-sm md:grid-cols-2">
              <div>
                    <dt class="font-medium text-slate-700 dark:text-slate-300">User ID</dt>
       <dd class="mt-1 text-slate-600 dark:text-slate-400">@_userId</dd>
     </div>
      <div>
       <dt class="font-medium text-slate-700 dark:text-slate-300">Role</dt>
    <dd class="mt-1 text-slate-600 dark:text-slate-400">
  <span class="inline-flex items-center rounded-full bg-brand-50 px-2 py-1 text-xs font-medium text-brand-700 ring-1 ring-inset ring-brand-600/20 dark:bg-brand-600/15 dark:text-brand-300">Admin</span>
          </dd>
             </div>
            </dl>
      </div>
    </div>
}

@code {
    private AdminProfileViewModel _profileModel = new();
    private ChangePasswordViewModel _passwordModel = new();
 private EditContext _editContext = default!;
    private EditContext _passwordEditContext = default!;
    private bool _isLoading = true;
private bool _isSaving = false;
    private bool _isChangingPassword = false;
    private string _userId = string.Empty;
    private bool _showCurrentPassword = false;
    private bool _showNewPassword = false;
    private bool _showConfirmPassword = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
     var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
   _userId = UserManager.GetUserId(user) ?? string.Empty;

         if (!string.IsNullOrEmpty(_userId))
 {
         var profile = await AdminProfileService.GetAdminProfileAsync(_userId);

  if (profile != null)
    {
     _profileModel = profile;
    }
      }
        }

    _editContext = new EditContext(_profileModel);
        _passwordEditContext = new EditContext(_passwordModel);
     _isLoading = false;
    }

    private async Task HandleUpdateProfileAsync()
    {
if (!_editContext.Validate())
        {
 return;
 }

     _isSaving = true;
        try
        {
        var success = await AdminProfileService.UpdateAdminProfileAsync(_userId, _profileModel);

  if (success)
            {
   ToastService.ShowToast(ToastLevel.Success, "Profile updated successfully", "Success");
      }
  else
     {
          ToastService.ShowToast(ToastLevel.Error, "Failed to update profile. Email might be already in use.", "Error");
            }
        }
    catch (Exception ex)
        {
     ToastService.ShowToast(ToastLevel.Error, $"An error occurred: {ex.Message}", "Error");
        }
   finally
      {
            _isSaving = false;
        }
}

    private async Task HandleChangePasswordAsync()
    {
        if (!_passwordEditContext.Validate())
        {
return;
      }

        _isChangingPassword = true;
      try
        {
         var result = await AdminProfileService.ChangePasswordAsync(_userId, _passwordModel);

          if (result.Success)
            {
    ToastService.ShowToast(ToastLevel.Success, result.Message, "Success");

                _passwordModel = new ChangePasswordViewModel();
          _passwordEditContext = new EditContext(_passwordModel);
          }
          else
    {
          ToastService.ShowToast(ToastLevel.Error, result.Message, "Error");
            }
     }
        catch (Exception ex)
    {
         ToastService.ShowToast(ToastLevel.Error, $"An error occurred: {ex.Message}", "Error");
        }
        finally
        {
            _isChangingPassword = false;
        }
    }
}
