@page "/admin/manage-blog-posts/new"
@page "/admin/manage-blog-posts/edit/{id:int?}"

@using Blazored.TextEditor
@using Ganss.Xss;

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebHostEnvironment WebHostEnvironment
@inject IBlogPostAdminService BlogPostService
@inject ICategoryService CategoryService
@inject IHtmlSanitizer HtmlSanitizer
@inject NavigationManager NavigationManager
<PageTitle>@Utils.GetPageTitle(PageTitle)</PageTitle>

<HeadContent>
    <link href="//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.3.6/quill.bubble.css" rel="stylesheet">
</HeadContent>

<SectionContent SectionName="scripts">
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="_content/Blazored.TextEditor/quill-blot-formatter.min.js"></script>
    <script src="_content/Blazored.TextEditor/Blazored-BlazorQuill.js"></script>
</SectionContent>

<AdminHeader Title="@PageTitle">
    <ActionButtons>
        <NavLink href="/admin/manage-blog-posts" class="btn btn-primary btn-sm">Go Back</NavLink>
    </ActionButtons>
    </AdminHeader>

@if (_isLoading)
{
    <Loader LoaderText="@_loadingText" />
}

<EditForm Model="_blogPost" OnValidSubmit="SaveBlogPostAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm-6">
            <div class="mb-3">
                <label class="form-label">Title</label>
                <InputText @bind-Value="_blogPost.Title" class="form-control form-control-sm" placeholder="Blog post title" />
                <ValidationMessage For="() => _blogPost.Title" class="text-danger" />
            </div>
            <div class="mb-3">
                <label class="form-label">Category</label>
                <InputSelect @bind-Value="_blogPost.CategoryId" class="form-control form-control-sm">
                    <option value="0">Select Category</option>
                    @foreach (var category in _categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => _blogPost.CategoryId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <InputText @bind-Value="_blogPost.Introduction" class="form-control form-control-sm" placeholder="Blog post introduction" />
                <ValidationMessage For="() => _blogPost.Introduction" class="text-danger" />
            </div>
            @if (!string.IsNullOrWhiteSpace(_imageUrl))
            {
                <div class="mb-3">
                    <img src="@_imageUrl" style="height: 200px" />
                </div>
            }
            <div class="mb-3">
                <label class="form-label">Upload Image</label>
                <br />
                <InputFile OnChange="HandleFileUploadAsync" />
            </div>
            <div class="mb-3">
                <label class="form-label ml-4">
                    <InputCheckbox @bind-Value="_blogPost.IsFeatured" class="form-check-input" />
                    Featured?
                </label>
            </div>
            <div class="mb-3">
                <label class="form-label ml-4">
                    <InputCheckbox @bind-Value="_blogPost.IsPublished" class="form-check-input" />
                    Published?
                </label>
            </div>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="mb-3">
                    <div class="alert alert-danger">
                        <p class="text-danger">@_errorMessage</p>
                    </div>
                </div>
            }
        </div>
        <div class="col-sm-6 d-flex">
            <div class="mb-3 flex-grow-1">
                <label class="form-label">Content</label>
                <BlazoredTextEditor @ref="@_quillHtml" Placeholder="Enter your blog post content here...">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-color"></button>
                            <button class="ql-background"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @((MarkupString)_blogPost.Content)
                    </EditorContent>
                </BlazoredTextEditor>

                <ValidationMessage For="() => _blogPost.Content" class="text-danger" />
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-success">Save</button>
    </div>
</EditForm>

@code {
    private bool _isLoading;
    private string? _loadingText;
    private BlogPost _blogPost = new BlogPost();
    private BlazoredTextEditor? _quillHtml;
    private Category[] _categories = [];
    private string? _errorMessage;
    private IBrowserFile? _fileToUpload;
    private string? _imageUrl;
    private string PageTitle => Id is > 0 ? "Edit Blog Post" : "New Blog Post";

    [Parameter]
    public int? Id {get; set; }

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoryService.GetCategoriesAsync();

        if (Id.HasValue && Id > 0)
        {
            var blogPost = await BlogPostService.GetBlogPostByIdAsync(Id.Value);

            if (blogPost is null)
            {
                NavigationManager.NavigateTo("/admin/manage-blog-posts", replace: true);
                return;
            }

            _blogPost = blogPost;
            _imageUrl = blogPost.Image;
        }
    }

    private async Task PreviewImageAsync(IBrowserFile file)
    {
        var extension = Path.GetExtension(file.Name)[1..];
        using var imageStream = file.OpenReadStream();
        using MemoryStream ms = new MemoryStream();
        await imageStream.CopyToAsync(ms);
        _imageUrl = $"data:image/{extension};base64,{Convert.ToBase64String(ms.ToArray())}";
    }

    private async Task HandleFileUploadAsync(InputFileChangeEventArgs e)
    {
        await PreviewImageAsync(e.File);
        _fileToUpload = e.File;
    }

    private async Task SaveBlogPostAsync()
    {
        try
        {
            var content = await _quillHtml!.GetHTML();

            if (string.IsNullOrEmpty(content))
            {
                _errorMessage = "Blog post content is required.";
                return;
            }

            _blogPost.Content = content;
            _loadingText = "Saving blog post";
            _isLoading = true;

            string? imageUrlToDelete = null;


            if (_fileToUpload is not null)
            {
                var uploadedFileUrl = await SaveFileAsync(_fileToUpload);

                if (uploadedFileUrl is null)
                {
                    return;
                }

                if (_blogPost.Id > 0 && !string.IsNullOrWhiteSpace(_blogPost.Image))
                {
                    imageUrlToDelete = _blogPost.Image;
                }

                _blogPost.Image = uploadedFileUrl;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.GetUserId();

            await BlogPostService.SaveBlogPostAsync(_blogPost, userId);
            _fileToUpload = null;

            if (imageUrlToDelete is not null)
            {
                DeleteExistingImage(imageUrlToDelete);
            }

            // _isLoading = false;
            NavigationManager.NavigateTo("/admin/manage-blog-posts");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            _isLoading = false;
        }
    }

    private async Task<string?> SaveFileAsync(IBrowserFile file)
    {
        var webRootPath = WebHostEnvironment.WebRootPath;
        var folderPath = Path.Combine(webRootPath, "images", "posts");
        Directory.CreateDirectory(folderPath);

        var randomFileName = Path.GetRandomFileName();
        var extension = Path.GetExtension(file.Name);
        var filePath = Path.Combine(folderPath, randomFileName + extension);

        await using FileStream fs = new(filePath, FileMode.Create);

        try
        {
            await file.OpenReadStream().CopyToAsync(fs);
            return Path.Combine("images", "posts", randomFileName + extension).Replace("\\", "/");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
            fs.Close();
            return null;
        }
    }

    private void DeleteExistingImage(string imageUrl)
    {

        var imageToDelete = Path.Combine(WebHostEnvironment.WebRootPath, imageUrl.Replace("/", "\\"));
        var fullPath = Path.GetFullPath(imageToDelete);

        try
        {
            if (File.Exists(fullPath))
            {
                File.Delete(fullPath);
            }
        }
        catch
        {
            // ignored
        }
    }
}
