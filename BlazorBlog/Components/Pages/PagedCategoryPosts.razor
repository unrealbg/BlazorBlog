@page "/{categorySlug}-posts/all"
@page "/{categorySlug}-posts/all/page-{uriPageNumber:int}"

@inject NavigationManager NavigationManager
@inject IBlogPostService BlogPostService
@inject ICategoryService CategoryService

<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-8">

            <h5 class="font-weight-bold spanborder"><span>@_category?.Name Posts @(_pageNumber > 1 ? $"(Page - {_pageNumber})" : "")</span></h5>
            <BlogPostList Posts="_posts" />
            <hr />
            <div class="d-flex justify-content-between">
                @if (_pageNumber > 1)
                {
                    var prevPageUrl = $"{CategorySlug}-posts/all";
                    if (_pageNumber > 2)
                    {
                        prevPageUrl += $"/page-{_pageNumber - 1}";
                    }

                    <a href="@prevPageUrl" class="btn btn-sm btn-outline-primary">Previous Page</a>
                }
                else
                {
                    <span>&nbsp;</span>
                }

                @if(_posts.Length == PageSize)
                {
                    var nextPageUrl = $"{CategorySlug}-posts/all/page-{_pageNumber + 1}";
                    <a href="@nextPageUrl" class="btn btn-sm btn-outline-primary">Next Page</a>
                }

            </div>
            <hr />
        </div>

        <div class="col-md-4 pl-4">
            <div class="sticky-top">
                <h5 class="font-weight-bold spanborder"><span>Popular in @_category?.Name</span></h5>
                <PopularBlogPostList Posts="_popular" />
            </div>
        </div>


    </div>
</div>

<div class="container pt-4 pb-4">
    <SubscribeBox />
</div>

@code {
    private const int PageSize = 2;

    private int _pageNumber = 1;
    private Category _category;
    private BlogPost[] _posts = [];
    private BlogPost[] _popular = [];

    [Parameter]
    public string CategorySlug { get; set; }

    [Parameter]
    public int? UriPageNumber { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UriPageNumber.HasValue)
        {
            if (UriPageNumber < 2)
            {
                NavigationManager.NavigateTo($"{CategorySlug}-posts/all", replace: true);
                return;
            }

            _pageNumber = UriPageNumber.Value;
        }

        var category = await CategoryService.GetCategoryBySlugAsync(CategorySlug);

        if (category is null)
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }

        _category = category;

        var posts = await Task.WhenAll(
            BlogPostService.GetPopularBlogPostsAsync(4, _category.Id),
            BlogPostService.GetBlogPostsAsync(_pageNumber - 1, PageSize, _category.Id)
        );

        _popular = posts[0];
        _posts = posts[1];
    }

}
